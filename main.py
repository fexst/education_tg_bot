import configparser
import telebot
import json
from telebot import types
import random
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import RussianWord, EnglishWord, Visibility, create_tables


config = configparser.ConfigParser()
config.read('settings.ini', encoding='utf-8')
token_tg = config.get("TOKEN", "TOKEN")

bot = telebot.TeleBot(token_tg)


def load_words():
    with open('data_word.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    for rus, eng in data.items():
        russian_word = session.query(RussianWord).filter_by(word=rus).first()
        if not russian_word:
            russian_word = RussianWord(word=rus)
            session.add(russian_word)
            session.flush()

        english_word = EnglishWord(word=eng, id_russian=russian_word.id)
        session.add(english_word)

    session.commit()


def add_visibility(chat_id):
    all_russian_words = session.query(RussianWord).all()
    existing_word_ids = {
        v.id_russian for v in session.query(Visibility).filter_by(chatid=chat_id).all()
    }
    new_entries = [
        Visibility(chatid=chat_id, id_russian=word.id)
        for word in all_russian_words if word.id not in existing_word_ids
    ]

    if new_entries:
        session.add_all(new_entries)
        session.commit()


DSN = "postgresql://postgres:postgres!@localhost:5432/nameproject"
engine = create_engine(DSN)
create_tables(engine)
Session = sessionmaker(bind=engine)
session = Session()
load_words()


def get_random_question(chat_id):
    visible_words = (
        session.query(RussianWord)
        .join(Visibility, RussianWord.id == Visibility.id_russian)
        .filter(Visibility.chatid == chat_id)
        .all()
    )
    if not visible_words:
        return None, None, None

    question_word = random.choice(visible_words)
    correct_translation = session.query(EnglishWord).filter_by(id_russian=question_word.id).first()
    if not correct_translation:
        return None, None, None

    all_words = session.query(EnglishWord).all()
    options = [correct_translation.word] + random.sample(
        [w.word for w in all_words if w.word != correct_translation.word], 3)
    random.shuffle(options)
    return question_word.word, correct_translation.word, options


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. \n"
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ.\n"
        "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ ‚ûï –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö ‚ùå.\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º!"
    )

    chat_id = message.chat.id

    with open('data_word.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    loaded_word_ids = []
    for rus, eng in data.items():
        russian_word = session.query(RussianWord).filter_by(word=rus).first()
        if russian_word:
            loaded_word_ids.append(russian_word.id)

    existing_word_ids = {
        v.id_russian for v in session.query(Visibility).filter_by(chatid=chat_id).all()
    }

    new_entries = [
        Visibility(chatid=chat_id, id_russian=word_id)
        for word_id in loaded_word_ids if word_id not in existing_word_ids
    ]

    if new_entries:
        session.add_all(new_entries)
        session.commit()

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚û° –î–∞–ª–µ–µ"))
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚û° –î–∞–ª–µ–µ")
def next_question(message):
    ask_question(message.chat.id)


def ask_question(chat_id):
    question, correct, options = get_random_question(chat_id)
    if question is None:
        bot.send_message(chat_id, "–°–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö! ‚ûï")
        return

    markup = types.InlineKeyboardMarkup()
    for option in options:
        markup.add(types.InlineKeyboardButton(text=option, callback_data=f"answer_{option}_{correct}"))

    bot.send_message(chat_id, f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è '{question}'?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def check_answer(call):
    _, user_answer, correct_answer = call.data.split("_")

    if user_answer == correct_answer:
        bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚û° –î–∞–ª–µ–µ"))
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
def add_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:")
    bot.register_next_step_handler(message, process_add_word, message.chat.id)


def process_add_word(message, chat_id):
    russian = message.text.strip()
    rus_entry = session.query(RussianWord).filter_by(word=russian).first()
    if not rus_entry:
        rus_entry = RussianWord(word=russian)
        session.add(rus_entry)
        session.flush()

    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(message, process_add_translation, chat_id, rus_entry.id)


def process_add_translation(message, chat_id, rus_id):
    english = message.text.strip()
    eng_entry = EnglishWord(word=english, id_russian=rus_id)
    session.add(eng_entry)
    session.add(Visibility(chatid=chat_id, id_russian=rus_id))
    session.commit()
    bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    ask_question(chat_id)


@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
def remove_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_remove_word, message.chat.id)


def process_remove_word(message, chat_id):
    russian = message.text.strip()
    rus_entry = session.query(RussianWord).filter_by(word=russian).first()
    if rus_entry:
        visibility_entry = session.query(Visibility).filter_by(chatid=chat_id, id_russian=rus_entry.id).first()
        if visibility_entry:
            session.delete(visibility_entry)
            session.commit()
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
        else:
            bot.send_message(chat_id, "‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
    else:
        bot.send_message(chat_id, "‚ùå –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.")
    ask_question(chat_id)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
